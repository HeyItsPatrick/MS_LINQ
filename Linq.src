// NOTE: Comparer functions *must* be written such that for parameter values `a` and `b`, it returns
//   -1 if a < b
//    0 if a == b
//    1 if a > b
default_comparer = function(a, b)
  if @a < @b then return -1
  if @a == @b then return 0
  return 1
end function

// This version of the Quicksort algorithm is iterative and uses the Lomuto partition scheme
// Will always pale in comparison to sort() though because it's not native
// This version also returns a sorted copy without mutating the passed array; simply uncomment the couple lines and comment out
//   the following lines until the empty line to make it sort in place
quicksort = function(arr = [], desc = false, key_selector = null, comparer = null)
  if @arr == null then arr == []
  if not @arr isa list then
    print("LINQ error: Invalid argument, arg must be a list")
    [][0]
  end if
  if @key_selector != null and not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function")
    [][0]
  end if
  if desc then desc = -1 else desc = 1
  if @key_selector == null then
    key_selector = function(a)
      return a
    end function
  end if
  if @comparer == null then comparer = @default_comparer
  if len(arr) == 0 then return []
  result = [null] * len(arr)
  aux_stack = []
  low_idx = 0
  high_idx = len(arr) - 1
  pivot_idx = 0
  while len(aux_stack) > 0 or low_idx < high_idx
    if low_idx < high_idx then
      pivot_idx = floor((low_idx + high_idx) / 2)
      //pivot_value = arr[pivot_idx]
      //arr[pivot_idx] = arr[high_idx]
      //arr[high_idx] = pivot_value
      if result[pivot_idx] == null then pivot_value = @arr[pivot_idx] else pivot_value = @result[pivot_idx]
      if result[high_idx] == null then result[pivot_idx] = @arr[high_idx] else result[pivot_idx] = @result[high_idx]
      result[high_idx] = @pivot_value

      pivot_idx = low_idx
      for i in range(low_idx, high_idx - 1)
        if result[i] == null then v = arr[i] else v = result[i]
        //if arr[i] < pivot_value then
        if comparer(@key_selector(@v), @key_selector(@pivot_value)) == (-1 * desc) then

          //t = arr[pivot_idx]
          //arr[pivot_idx] = arr[i]
          //arr[i] = t
          if result[pivot_idx] == null then t = @arr[pivot_idx] else t = @result[pivot_idx]
          if result[i] == null then result[pivot_idx] = @arr[i] else result[pivot_idx] = @result[i]
          result[i] = @t

          pivot_idx = pivot_idx + 1
        end if
      end for
      //arr[high_idx] = arr[pivot_idx]
      //arr[pivot_idx] = pivot_value
      if result[pivot_idx] == null then result[high_idx] = @arr[pivot_idx] else result[high_idx] = @result[pivot_idx]
      result[pivot_idx] = @pivot_value

      aux_stack.push(pivot_idx + 1)
      aux_stack.push(high_idx)
      high_idx = pivot_idx - 1
    else if len(aux_stack) > 0 then
      high_idx = aux_stack.pop()
      low_idx = aux_stack.pop()
    end if
  end while
  return result
end function


//Applies an accumulator function over the list, returning a copy. The method works by calling `func` once for each element in the list, passing both the accumulator value and current element. The returned value from `func` is stored to the accumulator and used on the next pass.
list.aggregate = function(func = null, seed = null, result_selector = null)
  if not @func isa funcRef then
    print("LINQ error: Invalid argument, `func` must be a function reference")
    [][0]
  end if
  if @seed != null and @seed isa funcRef then
    print("LINQ error: Invalid argument, `seed` cannot be a function reference")
    [][0]
  end if
  if @result_selector != null and not @result_selector isa funcRef then
    print("LINQ error: Invalid argument, `result selector` must be a function reference")
    [][0]
  end if
  acc = @seed
  for el in self
    acc = func(@acc, @el)
  end for
  if @result_selector == null then return @acc
  return result_selector(@acc)
end function

// Determines whether all elements in the list satisfy a condition
list.all = function(predicate = null)
  if not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  for el in self
    if not predicate(@el) then return false
  end for
  return true
end function

// Determines whether any element exists in the list or satisfies a condition.
list.any = function(predicate = null)
  if @predicate != null and not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  if @predicate == null then return len(self) > 0
  for el in self
    if predicate(@el) then return true
  end for
  return false
end function

// Computes the average of the list values. Does not detect types, so be sure to include a `selector` argument for non-numeric types.
list.average = function(selector = null)
  if @selector != null and not @selector isa funcRef then
    print("LINQ error: Invalid argument, `selector` must be a function reference")
    [][0]
  end if
  if len(self) == 0 then return null
  avg = 0
  for el in self
    if @selector == null then avg = avg + @el else avg = avg + selector(@el)
  end for
  return avg / len(self)
end function

// Split the list into a new list of chunks of a definite size
list.chunk = function(sz = 1)
  if not @sz isa number then
    print("LINQ error: Invalid argument, `size` must be a number")
    [][0]
  end if
  if sz < 1 then
    print("LINQ error: Argument out of range, `size` must be greater than 1")
    [][0]
  end if
  sz = ceil(sz)
  result = []
  chunk = []
  for el in self
    if len(chunk) < sz then
      chunk.push(@el)
    else
      result.push(chunk)
      chunk = [@el]
    end if
  end for
  result.push(chunk)
  return result
end function

// Provides the distinct elements from a list
list.distinct = function(comparer = null)
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self
    found_similar = false
    for res_el in result
      if comparer(@el, @res_el) == 0 then
        found_similar = true
        break
      end if
    end for
    if not found_similar then result.push(@el)
  end for
  return result
end function

// Returns the distinct elements from the list according to the passed key selector function
list.distinct_by = function(key_selector = null, comparer = null)
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self
    found_similar = false
    for res_el in result
      if comparer(key_selector(@el), key_selector(@res_el)) == 0 then
        found_similar = true
        break
      end if
    end for
    if not found_similar then result.push(@el)
  end for
  return result
end function

// Produces a list which represents the elements which appear in the source list and not in the passed list
list.except = function(second = [], comparer = null)
  if @second == null then second = []
  if not @second isa list then
    print("LINQ error: Invalid argument, `second` must be a list")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self
    found_similar = false
    for res_el in result
      if @el == @res_el == 0 then
        found_similar = true
        break
      end if
    end for
    if not found_similar then
      for sec_el in second
        if comparer(@el, @sec_el) == 0 then
          found_similar = true
          break
        end if
      end for
    end if
    if not found_similar then result.push(@el)
  end for
  return result
end function

// Produces a list which represents the elements which appear in the source list and not in the passed list, according to a key selector function
list.except_by = function(second = [], key_selector = null, comparer = null)
  if @second == null then second = []
  if not @second isa list then
    print("LINQ error: Invalid argument, `second` must be a list")
    [][0]
  end if
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self
    found_similar = false
    for res_el in result
      if @res_el == @el then
        found_similar = true
        break
      end if
    end for
    if not found_similar then
      for sec_el in second
        if comparer(key_selector(@el), @sec_el) == 0 then
          found_similar = true
          break
        end if
      end for
    end if
    if not found_similar then result.push(@el)
  end for
  return result
end function

// Group the elements according to a specified key selector function
list.group_by = function(key_selector = null, element_selector = null, result_selector = null, comparer = null)
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @element_selector != null and not @element_selector isa funcRef then
    print("LINQ error: Invalid argument, `element_selector` must be a function reference")
    [][0]
  end if
  if @result_selector != null and not @result_selector isa funcRef then
    print("LINQ error: Invalid argument, `result_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  group_map = {}
  for el in self
    k = key_selector(@el)
    v = null
    if @element_selector == null then v = @el else v = element_selector(@el)
    found_key = false
    for key in group_map.indexes
      if comparer(@k, @key) == 0 then
        found_key = true
        break
      end if
    end for
    if found_key then group_map[@k].push(@v) else group_map[@k] = [@v]
  end for
  if @result_selector == null then return group_map
  result = []
  for kvp in group_map
    result.push(result_selector(@kvp.key, @kvp.value))
  end for
  return result
end function

// Groups the elements of two lists based on key equality
list.group_join = function(inner = [], outer_key_selector = null, inner_key_selector = null, result_selector = null, comparer = null)
  if @inner == null then inner = []
  if not @inner isa list then
    print("LINQ error: Invalid argument, `inner` must be a list")
    [][0]
  end if
  if @outer_key_selector != null and not @outer_key_selector isa funcRef then
    print("LINQ error: Invalid argument, `outer_key_selector` must be a function reference")
    [][0]
  end if
  if @inner_key_selector != null and not @inner_key_selector isa funcRef then
    print("LINQ error: Invalid argument, `inner_key_selector` must be a function reference")
    [][0]
  end if
  if @result_selector != null and not @result_selector isa funcRef then
    print("LINQ error: Invalid argument, `result_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  group_map = {}
  result = []
  for el in self
    if @outer_key_selector != null then k = outer_key_selector(@el) else k = @el
    for inner_el in inner
      if @inner_key_selector != null then inner_key = inner_key_selector(@inner_el) else inner_key = @inner_el
      if comparer(@k, @inner_key) == 0 then
        if group_map.hasIndex(@el) then group_map[@el].push(@inner_el) else group_map[@el] = [@inner_el]
      end if
    end for
  end for
  if @result_selector == null then return group_map
  result = []
  for kvp in group_map
    result.push(result_selector(@kvp.key, @kvp.value))
  end for
  return result
end function

// Produces a list of all distinct elements which occur in the source and passed list
list.intersect = function(second = [], comparer = null)
  if second == null then second = []
  if not @second isa list then
    print("LINQ error: Invalid argument, `second` must be a list")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self
    found_similar = false
    for res_el in result
      if @res_el == @el then
        found_similar = true
        break
      end if
    end for
    if found_similar then continue
    for sec_el in second
      if comparer(@el, @sec_el) == 0 then
        found_similar = true
        break
      end if
    end for
    if found_similar then result.push(@el)
  end for
  return result
end function

// Produces a list of all distinct elements which occur in the source and passed list, according to the specified source key selector function
list.intersect_by = function(second = [], key_selector = null, comparer = null)
  if @second == null then second = []
  if not @second isa list then
    print("LINQ error: Invalid argument, `second` must be a list")
    [][0]
  end if
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self
    found_similar = false
    for res_el in result
      if @res_el == @el then
        found_similar = true
        break
      end if
    end for
    if found_similar then continue
    for sec_el in second
      if comparer(key_selector(@el), @sec_el) == 0 then
        found_similar = true
        break
      end if
    end for
    if found_similar then result.push(@el)
  end for
  return result
end function

// Basically an SQL INNER JOIN, only returning elements which match between the two, as a single list
// Unlike Intersect, this does not filter for distinct values nor does it implicitly require the list to contain all the same object type,
//   amongst other differences. Those are the biggest though
// https://stackoverflow.com/questions/15595289/linq-to-entities-join-vs-groupjoin
list.join_on = function(inner = null, outer_key_selector = null, inner_key_selector = null, result_selector = null, comparer = null)
  if not @inner isa list then
    print("LINQ error: Invalid argument, `inner` must be a list")
    [][0]
  end if
  if @outer_key_selector != null and not @outer_key_selector isa funcRef then
    print("LINQ error: Invalid argument, `outer_key_selector` must be a function reference")
    [][0]
  end if
  if @inner_key_selector != null and not @inner_key_selector isa funcRef then
    print("LINQ error: Invalid argument, `inner_key_selector` must be a function reference")
    [][0]
  end if
  if @result_selector != null and not @result_selector isa funcRef then
    print("LINQ error: Invalid argument, `result_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for outer_el in self
    if @outer_key_selector == null then outer_key = @outer_el else outer_key = outer_key_selector(@outer_el)
    for inner_el in inner
      if @inner_key_selector == null then inner_key = @inner_el else inner_key = inner_key_selector(@inner_el)
      if comparer(@outer_key, @inner_key) == 0 then
        if @result_selector == null then result.push([@outer_el, @inner_el]) else result.push(result_selector(@outer_el, @inner_el))
      end if
    end for
  end for
  return result
end function

// Returns the last element in the list, optionally the last element which satisfies the specified condition.
list.last = function(predicate = null)
  if @predicate != null and not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  if @predicate == null then
    if len(self) == 0 then
      print("LINQ error: Invalid operation, source list is empty")
      [][0]
    else
      return self[len(self) - 1]
    end if
  end if
  for idx in range(len(self) - 1, 0)
    if predicate(@self[idx]) then
      return @self[idx]
    end if
  end for
  print("LINQ error: Invalid operation, no element found matching the provided condition")
  [][0]
end function


// Returns the last element in the list, optionally the last element which satisfies the specified condition. If no such element exists or the source list is empty, a default value is returned
list.last_or_default = function(default_value = null, predicate = null)
  if @predicate != null and not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  if @predicate == null then
    if len(self) == 0 then return @default_value else return self[len(self) - 1]
  end if
  for idx in range(len(self) - 1, 0)
    if predicate(@self[idx]) then
      return @self[idx]
    end if
  end for
  return @default_value
end function


// Provides the maximum value within the source list, with an optional transform function to apply to each element
list.max = function(selector = null, comparer = null)
  if @selector != null and not @selector isa funcRef then
    print("LINQ error: Invalid argument, `selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  if len(self) == 0 then
    print("LINQ error: Invalid operation, cannot get maximum of an empty list")
    [][0]
  end if
  if @selector != null then m = selector(@self[0]) else m = @self[0]
  for el in self
    if @selector != null then v = selector(@el) else v = @el
    res = comparer(@v, @m)
    if res == 0 or res == 1 then m = @v
  end for
  return @m
end function



// Provides the element within the source list with the maximum key value according to a specified key selector function
list.max_by = function(key_selector = null, comparer = null)
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  if len(self) == 0 then return null
  m = @self[0]
  for el in self
    res = comparer(key_selector(@el), key_selector(@m))
    if res == 0 or res == 1 then m = @el
  end for
  return @m
end function

// Provides the minimum value within the source list, with an optional transform function to apply to each element
list.min = function(selector = null, comparer = null)
  if @selector != null and not @selector isa funcRef then
    print("LINQ error: Invalid argument, `selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  if len(self) == 0 then
    print("LINQ error: Invalid operation, cannot get minimum of an empty list")
    [][0]
  end if
  if @selector != null then m = selector(@self[0]) else m = @self[0]
  for el in self
    if @selector != null then v = selector(@el) else v = @el
    res = comparer(@v, @m)
    if res == -1 then m = @v
  end for
  return @m
end function


// Provides the element within the source list with the minimum key value according to a specified key selector function
list.min_by = function(key_selector = null, comparer = null)
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  if len(self) == 0 then return null
  m = @self[0]
  for el in self
    res = comparer(key_selector(@el), key_selector(@m))
    if res == -1 then m = @el
  end for
  return @m
end function

// Sort list elements in ascending order
list.order = function(comparer = null)
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  return quicksort(self, false, null, @comparer)
end function

// Sort list elements in ascending order according to a specified key selector
list.order_by = function(key_selector = null, comparer = null)
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  return quicksort(self, false, @key_selector, @comparer)
end function

// Sort list elements in descending order
list.order_descending = function(comparer = null)
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  return quicksort(self, true, null, @comparer)
end function

// Sort list elements in descending order according to a specified key selector
list.order_by_descending = function(key_selector = null, comparer = null)
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  return quicksort(self, true, @key_selector, @comparer)
end function

// Reverses the order of the list elements
list.reverse = function()
  result = []
  for i in range(len(self) - 1, 0)
    result.push(@self[i])
  end for
  return result
end function

// Project each element in the list into a new form
list.select = function(selector = null)
  if not @selector isa funcRef then
    print("LINQ error: Invalid argument, `selector must be a function reference")
    [][0]
  end if
  result = []
  for i in range(0, len(self) - 1)
    result.push(selector(@self[i], i))
  end for
  return result
end function

// Project each element of a list and flatten the result
list.select_many = function(collection_selector = null, result_selector = null)
  if not @collection_selector isa funcRef then
    print("LINQ error: Invalid argument, `collection_selector` must be a function reference")
    [][0]
  end if
  if @result_selector != null and not @result_selector isa funcRef then
    print("LINQ error: Invalid argument, `result_selector` must be a function reference")
    [][0]
  end if
  result = []
  for i in range(0, len(self) - 1)
    sm = collection_selector(@self[i], i)
    if not @sm isa list then
      print("LINQ error: Select Many `collection_selector` must return a list")
      [][0]
    end if
    for sm_el in sm
      if @result_selector == null then result.push(@sm_el) else result.push(result_selector(@self[i], @sm_el))
    end for
  end for
  return result
end function

// Returns the only element of the list, according to an optional condition
list.single = function(predicate = null)
  if len(self) == 0 then
    print("LINQ error: Invalid operation, Single cannot be used on an empty list")
    [][0]
  end if
  if @predicate == null and len(self) > 1 then
    print("LINQ error: Invalid operation, Single cannot be used on a list of size > 1 without passing a predicate function")
    [][0]
  end if
  if @predicate != null and not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  if len(self) == 1 and @predicate == null then return @self[0]
  found_element = null
  for el in self
    if predicate(@el) then
      if @found_element != null then
        print("LINQ error: Invalid operation, Single predicate found multiple matching elements")
        [][0]
      else
        found_element = @el
      end if
    end if
  end for
  if @found_element == null then
    print("LINQ error: Invalid operation, Single predicate found no matching elements")
    [][0]
  end if
  return @found_element
end function

// Returns the only element of the list according to an optional condition, or a default value if no element is found
list.single_or_default = function(predicate = null, default_value = null)
  if @predicate == null then
    if len(self) == 0 then
      print("LINQ error: Invalid operation, Single cannot be used on an empty list")
      [][0]
    end if
    if len(self) > 1 then
      print("LINQ error: Invalid operation, Single cannot be used on a list of size > 1 without passing a predicate function")
      [][0]
    end if
    if len(self) == 1 then return @self[0]
  end if
  if @predicate != null and not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  found_element = null
  for el in self
    if predicate(@el) then
      if @found_element != null then
        print("LINQ error: Invalid operation, Single predicate found multiple matching elements")
        [][0]
      else
        found_element = @el
      end if
    end if
  end for
  if @found_element == null then return @default_value else return @found_element
end function

// Skip the specified number of elements in a list and return the remaining elements
list.skip = function(count = 0)
  if not @count isa number then
    print("LINQ error: Invalid argument, `count` must be a number")
    [][0]
  end if
  count = round(count)
  if count < 1 then return self + []
  if len(self) < count then return []
  return self[count :]
end function

// Get the elements of the list without the specified number of elements from the end
list.skip_last = function(count = 0)
  if not @count isa number then
    print("LINQ error: Invalid argument, `count` must be a number")
    [][0]
  end if
  count = round(count)
  if count < 0 then return self + []
  if len(self) < count then return []
  return self[: -count]
end function

// From the beginning of the list, skip all elements while the specified condition is true and return the remainder
list.skip_while = function(predicate = null)
  if not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  result = []
  for i in range(0, len(self) - 1)
    if predicate(@self[i], i) then continue
    result.push(@self[i])
  end for
  return result
end function

// Returns the specified number of contiguous elements from the start of the list
list.take = function(count = 0)
  if not @count isa number then
    print("LINQ error: Invalid argument, `count` must be a number")
    [][0]
  end if
  count = round(count)
  if count < 0 then return []
  if len(self) - 1 < count then return self + []
  return self[: count]
end function

// Returns the last number of elements from the source list
list.take_last = function(count = 0)
  if not @count isa number then
    print("LINQ error: Invalid argument, `count` must be a number")
    [][0]
  end if
  count = round(count)
  if count <= 0 then return []
  if len(self) - 1 < count then return self + []
  return self[-count :]
end function

// Returns a specified range of contiguous elements from a list 
list.take_range = function(start_idx = 0, end_idx = 0)
  if not @start_idx isa number then
    print("LINQ error: Invalid argument, `start_idx` must be a number")
    [][0]
  end if
  if not @end_idx isa number then
    print("LINQ error: Invalid argument, `end_idx` must be a number")
    [][0]
  end if
  if end_idx < start_idx then
    print("LINQ error: Invalid argument, `end_idx` cannot be less than `start_idx`")
    [][0]
  end if
  upper_bound = len(self) - 1
  if start_idx < 0 then
    start_idx = 0
  else if upper_bound < start_idx then
    start_idx = upper_bound
  end if
  if end_idx < 0 then
    end_idx = 0
  else if upper_bound < end_idx then
    end_idx = upper_bound
  end if
  return self[start_idx : end_idx] + []
end function

// Returns contiguous elements from the list as long as the condition is true
list.take_while = function(predicate = null)
  if not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  result = []
  for i in range(0, len(self) - 1)
    el = @self[i]
    if not predicate(@el, i) then break
    result.push(@el)
  end for
  return result
end function



// Joins second list to the end, removing all duplicated elements
list.union = function(second = [], comparer = null)
  if not @second isa list then
    print("LINQ error: Invalid argument, `second` must be a list")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self + second
    found_similar = false
    for res_el in result
      if comparer(@el, @res_el) == 0 then
        found_similar = true
        break
      end if
    end for
    if not found_similar then
      result.push(@el)
    end if
  end for
  return result
end function

// Join second list to the end according to a specified key selector, except any duplicated elements
list.union_by = function(second = [], key_selector = null, comparer = null)
  if not @second isa list then
    print("LINQ error: Invalid argument, `second` must be a list")
    [][0]
  end if
  if not @key_selector isa funcRef then
    print("LINQ error: Invalid argument, `key_selector` must be a function reference")
    [][0]
  end if
  if @comparer != null and not @comparer isa funcRef then
    print("LINQ error: Invalid argument, `comparer` must be a function reference")
    [][0]
  end if
  if @comparer == null then comparer = @default_comparer
  result = []
  for el in self + second
    found_similar = false
    for res_el in result
      if comparer(key_selector(@el), key_selector(@res_el)) == 0 then
        found_similar = true
        break
      end if
    end for
    if not found_similar then
      result.push(@el)
    end if
  end for
  return result
end function

// Returns contents of list which meet the specified condition
list.where = function(predicate = null)
  if not @predicate isa funcRef then
    print("LINQ error: Invalid argument, `predicate` must be a function reference")
    [][0]
  end if
  result = []
  for i in range(0, len(self) - 1)
    el = @self[i]
    if predicate(@el, i) then result.push(@el)
  end for
  return result
end function

// Applies the specified function to the corresponding elements of both lists, returning a list of the results
list.zip = function(second = [], result_selector = null)
  if not @second isa list then
    print("LINQ error: Invalid argument, `second` must be a list")
    [][0]
  end if
  if not @result_selector isa funcRef then
    print("LINQ error: Invalid argument, `result_selector` must be a function reference")
    [][0]
  end if
  result = []
  i = 0
  while i < len(self) and i < len(second)
    result.push(result_selector(@self[i], @second[i]))
    i = i + 1
  end while
  return result
end function

// Same as zip, but instead of a single list, passed a list of lists
list.zip_n = function(lists = [], result_selector = null)
  if not @lists isa list then
    print("LINQ error: Invalid argument, `lists` must be a list")
    [][0]
  end if
  if not @result_selector isa funcRef then
    print("LINQ error: Invalid argument, `result_selector` must be a function reference")
    [][0]
  end if
  min_len = len(self)
  for l in lists
    if len(l) < min_len then min_len = len(l)
  end for
  result = []
  for i in range(0, min_len - 1)
    items = [@self[i]]
    for l in lists
      items.push(@l[i])
    end for
    result.push(result_selector(items))
  end for
  return result
end function
